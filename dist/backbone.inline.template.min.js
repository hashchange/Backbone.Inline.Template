// Backbone.Inline.Template, v0.1.0
// Copyright (c) 2016 Michael Heim, Zeilenwechsel.de
// Distributed under MIT license
// http://github.com/hashchange/backbone.inline.template


!function(Backbone,_){"use strict";function a(a){return"inline"===a.data("el-definition")}function b(a){var b,c,d="",f=h.exec(a)||i.exec(a);if(!f)throw new Backbone.DeclarativeViews.TemplateError('Backbone.Inline.Template: Failed to parse template with inline `el` definition. No matching content found.\nTemplate text is "'+a+'"');f[3]?(b=f[1]+f[3],d=f[2]):b=f[0];try{c=e(b)}catch(g){throw new Backbone.DeclarativeViews.TemplateError('Backbone.Inline.Template: Failed to parse template with inline `el` definition. Extracted `el` could not be turned into a sample node.\nExtracted `el` definition string is "'+b+'", full template text is "'+a+'"')}return{templateContent:d,$elSample:c}}function c(a,b){var c={tagName:a.prop("tagName").toLowerCase(),className:e.trim(a.attr("class")),id:e.trim(a.attr("id")),otherAttributes:{}};_.each(a[0].attributes,function(a){var b=a.nodeName,d=a.nodeValue,e=d&&"class"!==b&&"id"!==b;e&&(c.otherAttributes[a.nodeName]=d)}),"div"!==c.tagName&&b.attr("data-tag-name",c.tagName),c.className&&b.attr("data-class-name",c.className),c.id&&b.attr("data-id",c.id),_.size(c.otherAttributes)&&b.attr("data-attributes",JSON.stringify(c.otherAttributes))}function d(a){try{return 0!==f.find(a).length}catch(b){return!1}}var e=Backbone.$,f=e(document),g=Backbone.InlineTemplate={},h=/(<\s*[a-zA-Z].*?>)([\s\S]*)(<\s*\/\s*[a-zA-Z]+\s*>)/,i=/<\s*[a-zA-Z].*?\/\s*>/;Backbone.DeclarativeViews.plugins.registerDataAttribute("el-definition"),g.hasInlineEl=a,g.updateOriginalTemplates=!1,Backbone.DeclarativeViews.defaults.loadTemplate=function(f){var h,i,j=g.hasInlineEl||a,k=g.updateOriginalTemplates,l=e(f);if(j(l)){if(h=b(l.html()),k){if(!d(f))throw new Backbone.DeclarativeViews.TemplateError("Backbone.Inline.Template: Can't update the template container because it doesn't exist in the DOM. The template property must be a valid selector (and not, for instance, a raw HTML string). Instead, we got \""+f+'"');i=l}else i=e("<script />").attr("type","text/x-template");c(h.$elSample,i),i.empty().text(h.templateContent)}else i=l;return i}}(Backbone,_);
//# sourceMappingURL=backbone.inline.template.min.js.map